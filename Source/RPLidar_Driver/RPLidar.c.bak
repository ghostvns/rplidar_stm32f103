#include "RPLidar.h"
#include <stdio.h>
#include <string.h>

static RPLidarMeasurement _currentMeasurement;
static bool flag_sst_serial = false;

uint8_t flag_Stop = 0;
uint8_t flag_Warning = 0;
uint8_t step = 0;

int sumPointDanger = 0;
int sumPointWarning = 0;
int numPointCheckAreaDanger = 0;
int numPointCheckAreaWarning = 0;


float rplidar_get_distance(void)
{
	return _currentMeasurement.distance;
}

float rplidar_get_angle(void)
{
	return _currentMeasurement.angle;
}

uint8_t rplidar_get_quality(void)
{
	return _currentMeasurement.quality;
}

bool rplidar_get_startBit(void)
{
	return _currentMeasurement.startBit;
}

void rplidar_gpio_init(void)
{
	GPIO_InitTypeDef  GPIO_InitStructure; 
	
	
	RCC_APB2PeriphClockCmd(MOTOR_GPIO_CLK, ENABLE);
	
	GPIO_InitStructure.GPIO_Pin = MOTOR_GPIO_Pin;
	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
	GPIO_Init(MOTOR_GPIO_PORT, &GPIO_InitStructure);
}

void start_motor_rplidar(void)
{
	GPIO_SetBits(MOTOR_GPIO_PORT,MOTOR_GPIO_Pin);
}

void stop_motor_rplidar(void)
{
	GPIO_ResetBits(MOTOR_GPIO_PORT,MOTOR_GPIO_Pin);
}

// open the given serial interface and try to connect to the RPLIDAR
void rplidar_begin(void)
{
	if (rplidar_isOpen())
	{			
		rplidar_end(); 
	}
	rplidar_gpio_init();
	lidar_serial_begin();
	flag_sst_serial =true;
	rplidar_startScan(false,RPLIDAR_DEFAULT_TIMEOUT*2);
}

// close the currently opened serial interface
void rplidar_end(void)
{
    if (rplidar_isOpen()) {
       lidar_serial_end();
			flag_sst_serial =false;
    }
}


// check whether the serial interface is opened
bool rplidar_isOpen(void)
{
    return flag_sst_serial?true:false; 
}

// ask the RPLIDAR for its health info
u_result rplidar_getHealth(rplidar_response_device_health_t * healthinfo, uint32_t timeout)
{
    uint32_t currentTs = millis();

    uint8_t *infobuf = (uint8_t *)&healthinfo;
    uint8_t recvPos = 0;

    rplidar_ans_header_t response_header;
    u_result  ans;


    if (!rplidar_isOpen())
		{
			return RESULT_OPERATION_FAIL;
		}

    
        if (IS_FAIL(ans = rplidar_sendCommand(RPLIDAR_CMD_GET_DEVICE_HEALTH, NULL, 0))) {
            return ans;
        }

        if (IS_FAIL(ans = rplidar_waitResponseHeader(&response_header, timeout))) {
            return ans;
        }

        // verify whether we got a correct header
        if (response_header.type != RPLIDAR_ANS_TYPE_DEVHEALTH) {
            return RESULT_INVALID_DATA;
        }

        if ((response_header.size) < sizeof(rplidar_response_device_health_t)) {
            return RESULT_INVALID_DATA;
        }
        
        while ((uint32_t)(millis() - currentTs) <= timeout) {
            int currentbyte = lidar_serial_read();
            if (currentbyte < 0) continue;
            
            infobuf[recvPos++] = currentbyte;

            if (recvPos == sizeof(rplidar_response_device_health_t)) {
                return RESULT_OK;
            }
        }
    
    return RESULT_OPERATION_TIMEOUT;
}




void clear_rplidar_ans_header_t(rplidar_ans_header_t* ans_header_t)
{
	ans_header_t->size = 30;
	ans_header_t->subType =2;
	ans_header_t->syncByte1 = NULL;
	ans_header_t->syncByte2 = NULL;
	ans_header_t->type = NULL;
}
// ask the RPLIDAR for its device info like the serial number
u_result rplidar_getDeviceInfo(rplidar_response_device_info_t * info, uint32_t timeout )
{
	static uint8_t  recvPos = 0;
	static uint32_t currentTs = 0;
	static uint8_t *infobuf;
	static	rplidar_ans_header_t response_header;
	u_result  ans;
	static uint8_t evv_getDevInf=0;
	
		switch(evv_getDevInf)
		{
			case 0:
			{
				recvPos = 0;
				infobuf = (uint8_t*)&info;
				clear_rplidar_ans_header_t(&response_header);
				evv_getDevInf++;
				break;
			}
			case 1:
			{
				if (!rplidar_isOpen())
				{
					evv_getDevInf=0;
					return RESULT_OPERATION_FAIL;
				}
				evv_getDevInf++;
				break;
			}
			case 2:
			{
        if (IS_FAIL(ans = rplidar_sendCommand(RPLIDAR_CMD_GET_DEVICE_INFO,NULL,0))) {
            return ans;
        }

        if (IS_FAIL(ans = rplidar_waitResponseHeader(&response_header, timeout))) {
            return ans;
        }

        // verify whether we got a correct header
        if (response_header.type != RPLIDAR_ANS_TYPE_DEVINFO) {
            return RESULT_INVALID_DATA;
        }

        if (response_header.size < sizeof(rplidar_response_device_info_t)) {
            return RESULT_INVALID_DATA;
        }
				currentTs = millis();
				evv_getDevInf++;
				break;
			}
			case 3:
			{
        if ((uint32_t)(millis() - currentTs) <= timeout) {
            int currentbyte = lidar_serial_read();
            if (currentbyte<0)
						{
							return RESULT_WAITTING_RESPONSE;    
						}
            infobuf[recvPos++] = currentbyte;

            if (recvPos == sizeof(rplidar_response_device_info_t)) {
								evv_getDevInf=0;
                return RESULT_OK;
            }
        }
				else
				{
					evv_getDevInf=0;
					return RESULT_OPERATION_TIMEOUT;
				}
				break;
			}
			default:
				evv_getDevInf =0;
				break;
		}
   return RESULT_WAITTING_RESPONSE;
}

// stop the measurement operation
u_result rplidar_stop()
{
    if (!rplidar_isOpen()) return RESULT_OPERATION_FAIL;
    u_result ans = rplidar_sendCommand(RPLIDAR_CMD_STOP,NULL,0);
    return ans;
}

// start the measurement operation
u_result rplidar_startScan(bool force, uint32_t timeout)
{
    u_result ans;
		static uint8_t event_startScan=0;
		static rplidar_ans_header_t response_header;
	
    switch (event_startScan)
		{
			case 0:
			{
				if (!rplidar_isOpen())
				{
					return RESULT_OPERATION_FAIL;
				}
				rplidar_stop(); //force the previous operation to stop
				
        ans = rplidar_sendCommand(force?RPLIDAR_CMD_FORCE_SCAN:RPLIDAR_CMD_SCAN, NULL, 0);
        if (IS_FAIL(ans))
				{
					return ans;
				}
				else
				{
					clear_rplidar_ans_header_t(&response_header);
					event_startScan++;
				}
				return RESULT_WAITTING_RESPONSE;
			}
			case 1:// waiting for confirmation
			{
				ans = rplidar_waitResponseHeader(&response_header, timeout);
        if (ans == RESULT_OPERATION_TIMEOUT)
				{
						event_startScan=0;
            return ans;
        }
				else if (IS_OK(ans))
				{
					event_startScan++;
				}
				return RESULT_WAITTING_RESPONSE;
			}
			case 2:// verify whether we got a correct header
			{
        if (response_header.type != RPLIDAR_ANS_TYPE_MEASUREMENT) {
            return RESULT_INVALID_DATA;
        }

        if (response_header.size < sizeof(rplidar_response_measurement_node_t)) {
            return RESULT_INVALID_DATA;
        }
				break;
			}
		}
		
		event_startScan=0;
    return RESULT_OK;
}





void clear_node(rplidar_response_measurement_node_t* response_measurement_node)
{
	response_measurement_node->angle_q6_checkbit = NULL;
	response_measurement_node->distance_q2 =NULL;
	response_measurement_node->sync_quality = NULL;
}

// wait for one sample point to arrive
u_result rplidar_waitPoint(uint32_t timeout)
{
  static uint64_t waitPoint_currentTs = 0;
  static uint8_t recvPos = 0;
	static uint8_t event_waitpoint=0;
	static rplidar_response_measurement_node_t node;
	static uint8_t *nodebuf;
	
	switch(event_waitpoint)
	{
		case 0:// this is fist time to run, so you need get currentTs
		{
			recvPos=0;
			waitPoint_currentTs = millis();
			event_waitpoint =1;
			clear_node(&node);
			nodebuf = (uint8_t*)&node;
			break;
		}
		case 1:
		{
		 if ((uint64_t)( millis() - waitPoint_currentTs) <= 500) 
		 {
				int currentbyte = lidar_serial_read();
				if (currentbyte<0)
				{
					return RESULT_WAITTING_RESPONSE;
				}

				switch (recvPos) {
						case 0: // expect the sync bit and its reverse in this byte          {
								{
										uint8_t tmp = (currentbyte>>1);
										if ( (tmp ^ currentbyte) & 0x1 ) {
												// pass
										} else {
											return RESULT_WAITTING_RESPONSE;
										}

								}
								break;
						case 1: // expect the highest bit to be 1
								{
										if (currentbyte & RPLIDAR_RESP_MEASUREMENT_CHECKBIT) {
												// pass
										} else {
												recvPos = 0;
												return RESULT_WAITTING_RESPONSE;
										}
								}
								break;
					}
					nodebuf[recvPos++] = currentbyte;

					if (recvPos == sizeof(rplidar_response_measurement_node_t))
					{
							// store the data ...
							_currentMeasurement.distance = node.distance_q2/4.0f;
							_currentMeasurement.angle = (node.angle_q6_checkbit >> RPLIDAR_RESP_MEASUREMENT_ANGLE_SHIFT)/64.0f;
							_currentMeasurement.quality = (node.sync_quality>>RPLIDAR_RESP_MEASUREMENT_QUALITY_SHIFT);
							_currentMeasurement.startBit = (node.sync_quality & RPLIDAR_RESP_MEASUREMENT_SYNCBIT);
							event_waitpoint=0;
							return RESULT_OK;
					}
		 }
		 else
		 {
				event_waitpoint=0;
			 waitPoint_currentTs = millis();
			 return RESULT_OPERATION_TIMEOUT;
		 }
		 break;
		}
		default:
			event_waitpoint=0;
			break;
	}
	 
	return RESULT_WAITTING_RESPONSE;
}






u_result rplidar_sendCommand(uint8_t cmd, const void * payload, size_t payloadsize)
{
    rplidar_cmd_packet_t pkt_header;
    rplidar_cmd_packet_t * header = &pkt_header;
    uint8_t checksum = 0;

    if (payloadsize && payload) {
        cmd |= RPLIDAR_CMDFLAG_HAS_PAYLOAD;
    }

    header->syncByte = RPLIDAR_CMD_SYNC_BYTE;
    header->cmd_flag = cmd;

    // send header first
    lidar_serial_write_buff( (uint8_t *)header, 2);

    if (cmd & RPLIDAR_CMDFLAG_HAS_PAYLOAD) {
        checksum ^= RPLIDAR_CMD_SYNC_BYTE;
        checksum ^= cmd;
        checksum ^= (payloadsize & 0xFF);

        // calc checksum
        for (size_t pos = 0; pos < payloadsize; ++pos) {
            checksum ^= ((uint8_t *)payload)[pos];
        }

        // send size
        uint8_t sizebyte = payloadsize;
        lidar_serial_write_buff((uint8_t *)&sizebyte, 1);

        // send payload
        lidar_serial_write_buff((uint8_t *)&payload, sizebyte);

        // send checksum
        lidar_serial_write_buff((uint8_t *)&checksum, 1);

    }

    return RESULT_OK;
}


void clear_respone_device_infor_t(rplidar_response_device_info_t * infor)
{
	infor->firmware_version = NULL;
	infor->hardware_version = NULL;
	infor->model = NULL;
	memset(infor->serialnum,NULL,16);
}

u_result rplidar_waitResponseHeader(rplidar_ans_header_t * header, uint32_t timeout)
{
  static uint8_t  recvPos = 0;
  static uint32_t currentTs = 0;
  static uint8_t *headerbuf ;
	static uint8_t even_waitResponseHeader=0;
	
	switch(even_waitResponseHeader)
	{
		case 0:
		{
			currentTs = millis();
			headerbuf = (uint8_t*)header;
			recvPos = 0;
			even_waitResponseHeader++;
			break;
		}
		case 1:
		{
			if ((uint32_t)(millis() - currentTs) <= timeout) 
			{
				int currentbyte = lidar_serial_read();
				if (currentbyte<0)
				{
					return RESULT_WAITTING_RESPONSE;
				}
				switch (recvPos) {
				case 0:
						if (currentbyte != RPLIDAR_ANS_SYNC_BYTE1) {
							return RESULT_WAITTING_RESPONSE;
						}
						break;
				case 1:
						if (currentbyte != RPLIDAR_ANS_SYNC_BYTE2) {
								recvPos = 0;
								return RESULT_WAITTING_RESPONSE;
						}
						break;
				}
				headerbuf[recvPos++] = currentbyte;

				if (recvPos == sizeof(rplidar_ans_header_t)) {
						even_waitResponseHeader =0;
						return RESULT_OK;
				}
			}
			else
			{
				even_waitResponseHeader=0;
				return RESULT_OPERATION_TIMEOUT;
			}
			break;
		}
		default:
			even_waitResponseHeader=0;
			break;
	}

	return RESULT_WAITTING_RESPONSE;
}

